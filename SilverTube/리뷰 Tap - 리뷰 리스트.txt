/*
    박준권
    - 리뷰 리스트 페이지
 */
public class ChannelReviewDetailFragment extends Fragment {
    private View rootView;
    private ImageView iv_send, iv_profile, iv_filter;
    private EditText et_writeReview;
    private TextView tv_review_count;
    private String[] items = {"작성일순", "좋아요순", "싫어요순", "댓글순"};
    private int itemsChecked = 0;
    private int filterType;
    private RecyclerView recyclerView;
    private ChannelReviewAdapter channelReviewAdapter;
    private Member member;
    private int memberIdx;
    private int channelIdx;
    private int totalAll;
    private int total;
    private int page;
    private boolean[] isOpens;
    private List<ReviewBoard> reviewBoardList;
    private SilverTubeConnector connector;
    private InputMethodManager imm;

    private final int MSG_REVIEW_LIST = 1;     // 리뷰 리스트 받아오기
    private final int MSG_REVIEW_INSERT = 2; // 리뷰 작성
    private Handler msgHandler = new Handler() {
        @Override
        public void handleMessage(@NonNull Message msg) {
            //Log.d("[ReviewBoardDetail]", "ReviewBoardDetail handleMessage 진입!!");
            if(msg.what == MSG_REVIEW_LIST) {    // 리뷰 리스트 받아오기
                //Log.d("[ReviewBoardDetail]", "ReviewBoard");
                if(msg.arg1 > 0) {
                    totalAll = msg.arg1;
                } else {
                    totalAll = 0;
                }

                List<ReviewBoard> reviewBoardList_temp = (List<ReviewBoard>) msg.obj;
                if (reviewBoardList_temp.size() > 0) {
                    if(totalAll > 0) {
                        //Log.d("[ReviewBoardDetail]", "reviewBoardList_temp : " + reviewBoardList_temp.size());

                        // 리사이클러뷰 셋팅
                        if(page == 1) {
                            // 리스트, 어뎁터 초기화
                            if(reviewBoardList != null) {
                                reviewBoardList.clear();
                            } else {
                                reviewBoardList = new ArrayList<>();
                            }

                            // 리사이클러 뷰 셋팅
                            for(ReviewBoard reviewBoard : reviewBoardList_temp) {
                                reviewBoardList.add(reviewBoard);
                            }

                            setRecyclerView(reviewBoardList);
                        } else {
                            for(ReviewBoard reviewBoard : reviewBoardList_temp) {
                                reviewBoardList.add(reviewBoard);
                            }
                            channelReviewAdapter.notifyDataSetChanged();
                        }
                    }
                } else {
                    //Log.d("[ReviewBoardDetail]", "reviewBoard is null");
                }
            } else if(msg.what == MSG_REVIEW_INSERT) {  // 리뷰 작성
                String rt = (String) msg.obj;
                if(rt.equals("ReviewBoardWrite_OK")) {
                    Toast.makeText(getActivity(), "리뷰가 작성되었습니다.", Toast.LENGTH_SHORT).show();
                    et_writeReview.setText(""); // 텍스트 창 초기화

                    itemsChecked = 0;
                    filterType = 0;
                    page = 1;
                    connector.reviewList(msgHandler, getContext(), channelIdx, memberIdx,filterType, page);
                }
            }
        }
    };

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        rootView =  inflater.inflate(R.layout.fragment_channel_review_detail, container, false);

        // 객체 초기화
        tv_review_count = rootView.findViewById(R.id.tv_review_count);
        iv_send = rootView.findViewById(R.id.iv_send);
        iv_profile = rootView.findViewById(R.id.iv_profile);
        iv_filter = rootView.findViewById(R.id.iv_filter);
        et_writeReview = rootView.findViewById(R.id.et_writeReview);
        recyclerView = rootView.findViewById(R.id.recyclerView);
        //키보드 숨김 or 보여주기 초기화
        imm = (InputMethodManager) getActivity().getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);

        // 서버 연동
        connector = new SilverTubeConnector();

        if(getArguments() != null) {
            if(getArguments().containsKey("reviewBoardList")) {
                reviewBoardList = (List<ReviewBoard>) getArguments().get("reviewBoardList");
            }

            if(getArguments().containsKey("member")) {
                member = (Member) getArguments().get("member");
                if(member != null) memberIdx = member.getMemberIdx();
            }

            if(getArguments().containsKey("channelIdx")) {
                channelIdx = (int) getArguments().get("channelIdx");
            }

            if(getArguments().containsKey("totalAll")) {
                totalAll = (int) getArguments().get("totalAll");
            }
        }

        page = 1;

        if(reviewBoardList != null) {
            setRecyclerView(reviewBoardList);
        }

        // 유저 로그인 상태 확인 : 로그인 정보 받아오기 & 로그인 상태 화면 셋팅
        if(member != null) {
            //Log.d("[ReviewBoardDetail]", "ChannelReviewFragment member : " + member.getUserMail());

            Glide.with(getActivity()).load(member.getUserImage()).into(iv_profile);

            // 작성 버튼 클릭 이벤트 설정
            iv_send.setOnClickListener(ivOnClickListener);
        } else {    // 유저 로그아웃 상태
            et_writeReview.setHint("로그인을 하셔야 리뷰 작성이 가능합니다.");
            et_writeReview.setEnabled(false);
        }

        // 리뷰 정렬 클릭 이벤트
        iv_filter.setOnClickListener(ivOnClickListener);

        return rootView;
    }

    // 리뷰 리스트 셋팅 함수
    private void setRecyclerView(List<ReviewBoard> reviewBoardList) {
        LinearLayoutManager reviewManager = new LinearLayoutManager(getActivity());
        recyclerView.setLayoutManager(reviewManager);

        channelReviewAdapter = new ChannelReviewAdapter(reviewBoardList, getContext(), getActivity(), tv_review_count);

        if(member != null) {
            channelReviewAdapter.setMember(member);
        }
        channelReviewAdapter.setChannelIdx(channelIdx);
        channelReviewAdapter.setFilterType(filterType);
        channelReviewAdapter.setLinearLayoutManager(reviewManager);
        recyclerView.setAdapter(channelReviewAdapter);
        recyclerView.clearOnScrollListeners();
        recyclerView.addOnScrollListener(onScrollListener);

        //리스트 개수 처리 & 초기화
        total = reviewBoardList.size();
        isOpens = new boolean[total];
        for (int y = 0; y < total; y++) {
            isOpens[y] = false;
        }

        //총 리뷰 갯수
        tv_review_count.setText("리뷰 " + totalAll + "개");
    }

    // 글작성, 리스트 정렬 필터 클릭 이벤트 설정
    ImageView.OnClickListener ivOnClickListener = new ImageView.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.iv_send:
                    String writeReview = et_writeReview.getText().toString().trim();
                    if(!writeReview.equals("")) {
                        ReviewBoard reviewBoard = new ReviewBoard();
                        reviewBoard.setChannelIdx(channelIdx);
                        reviewBoard.setMemberIdx(member.getMemberIdx());
                        reviewBoard.setReviewComment(writeReview);

                        // 키보드 자판을 내림[강제적으로]
                        imm.hideSoftInputFromWindow(et_writeReview.getWindowToken(), 0);

                        connector.reviewInsert(msgHandler, getContext(), reviewBoard);
                    }
                    break;
                case R.id.iv_filter:
                    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
                    builder.setCancelable(false);
                    builder.setSingleChoiceItems(items, itemsChecked, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            itemsChecked = which;
                        }
                    });
                    builder.setNegativeButton("선택", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
//                            Toast.makeText(getActivity(), items[itemsChecked], Toast.LENGTH_SHORT).show();
                            filterType = itemsChecked;

                            page = 1;
                            connector.reviewList(msgHandler, getContext(), channelIdx, memberIdx, filterType+1, page);
                        }
                    });
                    builder.setPositiveButton("취소", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            itemsChecked = filterType;
                            dialog.dismiss();
                        }
                    });
                    AlertDialog alertDialog = builder.create();
                    alertDialog.setTitle("리뷰 정렬");
                    alertDialog.show();
                    break;
            }
        }
    };

    // 스크롤 이벤트
    private RecyclerView.OnScrollListener onScrollListener = new RecyclerView.OnScrollListener() {
        @Override
        public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
            super.onScrolled(recyclerView, dx, dy);

            LinearLayoutManager layoutManager = LinearLayoutManager.class.cast(recyclerView.getLayoutManager());
            int totalItemCount = layoutManager.getItemCount();  //  리사이클러뷰가 가진 총 아이템 갯수
            int lastVisible = layoutManager.findLastCompletelyVisibleItemPosition(); // 마지막 아이템이 완전히 보일때 해당 Position을 알려준다.

            if (lastVisible >= totalItemCount - 1) {
                //Log.d("[asd]", "totalAll : " + totalAll);
                //Log.d("[asd]", "totalItemCount : " + totalItemCount);

                if(channelReviewAdapter.getReviewCount() > 0) {
                    totalAll = channelReviewAdapter.getReviewCount();
                    //Log.d("[asd]", "review_delete >> totalAll : " + totalAll);

                    reviewBoardList = channelReviewAdapter.setList();
                }

                if(totalAll != totalItemCount) {
                    page++;
                    channelReviewAdapter.setReviewPage(page);
                    connector.reviewList(msgHandler, getContext(), channelIdx, memberIdx, filterType, page);
                }
            }
        }
    };
}