/*
    박준권
    - 리뷰 리스트 Adapter
 */
public class ChannelReviewAdapter extends RecyclerView.Adapter<ChannelReviewAdapter.CustomHolder> {
    private List<ReviewBoard> list;
    private List<ReviewReply> reviewReplyList; 	  // 댓글 리스트
    private LinearLayoutManager reviewManager;  // 리뷰 레이아웃매니저 저장
    private Context context;
    private Activity activity;
    private SilverTubeConnector connector;
    private Member member;
    private int channelIdx;
    private int memberIdx;
    private View itemView;
    private TextView tv_review_count;

    private SparseBooleanArray replySelectedItems = new SparseBooleanArray();        // 댓글 입력창
    private SparseBooleanArray replyListSelectedItems = new SparseBooleanArray();    // 댓글 리스트
    private SparseBooleanArray replyOpenSelectedItems = new SparseBooleanArray();  // 댓글 더보기

    private SparseArray<List<ReviewReply>> replyListMapSelectedItems = new SparseArray<>();   // 댓글 리스트 저장

    private int reviewCount;
    private int position = -1;   // 클릭된 Item 위치 값 저장 받을 변수

    // 리뷰 삭제 및 수정 후 리스트 갱신에 사용할 변수 및 객체
    private int filterType; // 필터값 저장
    private int reviewPage;             // 현재 리뷰의 페이지값 저장
    private int reviewPage_temp = 1;    // 현재 페이지값 저장받아서 사용
    private List<ReviewBoard> reList;   // 새로받을 리스트 저장
    private int rePage = 1; // 페이징되어 받은 갯수 만큼 받을때 사용

    public ChannelReviewAdapter(List<ReviewBoard> list, Context context, Activity activity, TextView tv_review_count) {
        this.list = list;
        this.context = context;
        this.activity = activity;
        connector = new SilverTubeConnector();
        this.tv_review_count = tv_review_count;
    }

    // 로그인 유저 정보 받아오기
    public void setMember(Member member) {
        this.member = member;
        if(member != null) memberIdx = member.getMemberIdx();
    }

    // 해당 채널 정보 받아오기
    public void setChannelIdx(int channelIdx) {
        this.channelIdx = channelIdx;
    }

    // 리뷰 정렬 필터값 받아오기
    public void setFilterType(int filterType) {
        this.filterType = filterType;
    }

    // 리뷰 페이징처리 페이지값 받아오기
    public void setReviewPage(int reviewPage) {
        this.reviewPage = reviewPage;
        reviewPage_temp = reviewPage;
    }

    // 리뷰 리사이클러뷰 관리하는 레이아웃매니저 받아오기
    public void setLinearLayoutManager(LinearLayoutManager reviewManager) {
        this.reviewManager = reviewManager;
    }

    @NonNull
    @Override
    public ChannelReviewAdapter.CustomHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        itemView = activity.getLayoutInflater().inflate(R.layout.item_reviewcomment_list, parent, false);
        return new ChannelReviewAdapter.CustomHolder(itemView);
    }

    @Override
    public void onBindViewHolder(@NonNull ChannelReviewAdapter.CustomHolder holder, int position) {
        holder.onBind(list.get(position));
    }

    @Override
    public int getItemCount() {
        return list.size();
    }

    public class CustomHolder extends RecyclerView.ViewHolder {
        // 리뷰 객체
        private LinearLayout linear_review;
        private TextView tv_item_name, tv_item_day, tv_item_content, tv_item_showdetail, tv_item_likeup, tv_item_likedown;
        public TextView tv_item_totalcount, tv_item_contentall, tv_item_isUpdate;
        private ImageView iv_item_profile, iv_datdatdat, iv_item_likeup, iv_item_likedown;
        private RatingBar rb_item_score;
        private boolean isContentOpen;

        // 리플 객체
        private LinearLayout lay_item_replyform;
        private TextView tv_item_reply;
        private ImageView iv_item_profile_reply;
        private EditText et_item_insertReply;
        private FrameLayout fb_item_cancel, fb_item_insert;
        private Button btn_reply_open;

        // 리뷰 수정 다이얼로그 객체
        private AlertDialog alertDialog;
        private Button bt_yes;
        private Button bt_no;
        private EditText et_review_modify;
        private TextView tv_check;
        private String review_modify = null;

        // 댓글
        private int replyPage;  // 댓글 페이징에 사용할 변수
        private ReviewBoard reviewBoard = new ReviewBoard();
        private RecyclerView recyclerView;
        private int reply_total;
        private ChannelReviewReplyAdapter channelReviewReplyAdapter;
        private InputMethodManager imm;

        private ChannelReviewAdapter.CustomHolder channelReviewAdapterCustom = this;

        public CustomHolder(@NonNull View itemView) {
            super(itemView);
            linear_review = itemView.findViewById(R.id.linear_review);
            recyclerView = itemView.findViewById(R.id.recyclerView);
            tv_item_name = itemView.findViewById(R.id.tv_item_name);
            tv_item_day = itemView.findViewById(R.id.tv_item_day);
            tv_item_content = itemView.findViewById(R.id.tv_item_content);
            tv_item_showdetail = itemView.findViewById(R.id.tv_item_showdetail);
            tv_item_likeup = itemView.findViewById(R.id.tv_item_likeup);
            tv_item_likedown = itemView.findViewById(R.id.tv_item_likedown);
            iv_item_likeup = itemView.findViewById(R.id.iv_item_likeup);
            iv_item_likedown = itemView.findViewById(R.id.iv_item_likedown);
            tv_item_totalcount = itemView.findViewById(R.id.tv_item_totalcount);
            iv_item_profile = itemView.findViewById(R.id.iv_item_profile);
            tv_item_contentall = itemView.findViewById(R.id.tv_item_contentall);
            iv_datdatdat = itemView.findViewById(R.id.iv_datdatdat);
            btn_reply_open = itemView.findViewById(R.id.btn_reply_open);
            rb_item_score = itemView.findViewById(R.id.rb_item_score);
            tv_item_isUpdate = itemView.findViewById(R.id.tv_item_isUpdate);
            // 리플 객체
            tv_item_reply = itemView.findViewById(R.id.tv_item_reply);
            lay_item_replyform = itemView.findViewById(R.id.lay_item_replyform);
            iv_item_profile_reply = itemView.findViewById(R.id.iv_item_profile_reply);
            et_item_insertReply = itemView.findViewById(R.id.et_item_insertReply);
            fb_item_cancel = itemView.findViewById(R.id.fb_item_cancel);
            fb_item_insert = itemView.findViewById(R.id.fb_item_insert);

            //키보드 숨김 or 보여주기 초기화
            imm = (InputMethodManager) activity.getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);
            /*자세히보기 오픈 이벤트 초기화*/
            isContentOpen = false;

            // 장문 리뷰 상세보기 이벤트 설정
            tv_item_showdetail.setOnClickListener(mOnClickListener);

            // 댓글 리스트 클릭 이벤트 설정
            tv_item_totalcount.setOnClickListener(sOnClickListener);

            // 점점점 클릭시 다이얼로그 생성 이벤트 설정
            if(member != null) {
                iv_datdatdat.setOnClickListener(iOnClickListener);
            }

            // 댓글 작성 버튼 클릭 이벤트 설정
            tv_item_reply.setOnClickListener(vOnClickListener);

            // 리뷰 작성 및 취소 버튼 클릭 이벤트 설정
            fb_item_cancel.setOnClickListener(fOnClickListener);
            fb_item_insert.setOnClickListener(fOnClickListener);

            // 좋아요, 싫어요 버튼 클릭 이벤트
            iv_item_likeup.setOnClickListener(lhOnClickListener);
            iv_item_likedown.setOnClickListener(lhOnClickListener);

            // 리플 더보기 버튼 클릭 이벤트
            btn_reply_open.setOnClickListener(opOnClickListener);
        }

        public void onBind(ReviewBoard reviewBoard) {
            this.reviewBoard = reviewBoard;
            Glide.with(activity).load(reviewBoard.getUserImage()).into(iv_item_profile);
            tv_item_name.setText(reviewBoard.getUserNickname());
            tv_item_day.setText(reviewBoard.getLogdate());
            tv_item_content.setText(reviewBoard.getReviewComment());
            tv_item_contentall.setText(reviewBoard.getReviewComment());
            tv_item_likeup.setText(String.valueOf(reviewBoard.getLove()));
            tv_item_likedown.setText(String.valueOf(reviewBoard.getHate()));
            rb_item_score.setRating((float) reviewBoard.getGrade());
            tv_item_totalcount.setText("댓글 " + reviewBoard.getReplyCount() + "개");

            // 자신이 작성한 리뷰의 경우 다른색으로 화면에 보여주기
            if(member != null) {
                if (member.getMemberIdx() == reviewBoard.getMemberIdx()) {
                    int review_selected_color = ContextCompat.getColor(activity, R.color.colorListSelectBlue);
                    linear_review.setBackgroundColor(review_selected_color);
                } else {
                    int review_selected_color = ContextCompat.getColor(activity, R.color.colorBackGroundDefault);
                    linear_review.setBackgroundColor(review_selected_color);
                }
            }

            // 리플 프로필 사진 셋팅
            if(member != null) {
                Glide.with(activity).load(member.getUserImage()).into(iv_item_profile_reply);
            } else {
                Glide.with(activity).load(R.drawable.mycannel).into(iv_item_profile_reply);
            }
            /*간략 내용 표시로 초기화*/
            tv_item_content.setVisibility(View.VISIBLE);
            tv_item_contentall.setVisibility(View.GONE);

            position = getAdapterPosition();    // 현재 클릭된 Item 위치값 저장

            // 댓글 리스트 오픈 상태 초기화
            if(replyListSelectedItems.get(getAdapterPosition())) {
                recyclerView.setVisibility(View.VISIBLE);
                if(replyListMapSelectedItems.get(getAdapterPosition()) != null) {

                    Log.d("[Review]", "position : " + getAdapterPosition());
                    reviewReplyList.clear();
                    reviewReplyList.addAll(replyListMapSelectedItems.get(getAdapterPosition()));
                    Log.d("[Review]", "reviewReplyList size : " + reviewReplyList.size());
                    setRecyclerView(reviewReplyList);
                }
            } else {
                recyclerView.setVisibility(View.GONE);
            }

            // 댓글(리플) 입력창 오픈 상태 초기화
            if(replySelectedItems.get(getAdapterPosition())) {
                lay_item_replyform.setVisibility(View.VISIBLE);
            } else {
                lay_item_replyform.setVisibility(View.GONE);
            }

            // 수정된 리뷰표시
            if(reviewBoard.getIsUpdate() == 1) {
                tv_item_isUpdate.setVisibility(View.VISIBLE);
            } else {
                tv_item_isUpdate.setVisibility(View.GONE);
            }

            // 댓글 더보기 버튼 상태 초기화
            if(replyOpenSelectedItems.get(getAdapterPosition())) {
                btn_reply_open.setVisibility(View.VISIBLE);
            } else {
                btn_reply_open.setVisibility(View.GONE);
            }

            /*내용 글자수 체크 후 자세히보기 표기*/
            int textsize = reviewBoard.getReviewComment().length();
            if(textsize > 40) {
                tv_item_showdetail.setText("자세히 보기");
                tv_item_showdetail.setVisibility(View.VISIBLE);
            } else {
                tv_item_showdetail.setVisibility(View.GONE);
            }

            // 좋아요 싫어요 상태 셋팅
            if(reviewBoard.getLoveCheck().equals("empty")) {
                loveHateSetting(3);
            } else if(reviewBoard.getLoveCheck().equals("love")) {
                loveHateSetting(1);
            } else if(reviewBoard.getLoveCheck().equals("hate")) {
                loveHateSetting(2);
            }
        }

        // 서버 연결 핸들러
        private final int MSG_REPLY_LIST = 10;             	  // 리뷰에 대한 리플 리스트 받아오기
        private final int MSG_REVIEW_DELETE = 3;               // 리뷰 삭제
        private final int MSG_REVIEW_MODIFY = 4;              // 리뷰 수정
        private final int MSG_REPLY_INSERT = 12;                // 리플 작성
        private final int MSG_REVIEW_LOVE_HATE = 20;        // 좋아요, 싫어요
        private final int MSG_REVIEW_REPLY_REPORT = 30;    // 리뷰 신고
        private final int MSG_REVIEW_LIST = 1;                   // 리뷰 리스트 받아오기

        private Handler msgHandler = new Handler() {
            @Override
            public void handleMessage(@NonNull Message msg) {
                Log.d("[Review]", "REVIEW handleMessage 진입!!");
                if(msg.what == MSG_REPLY_LIST) {     // 리플 리스트
                    Log.d("[Review]", "ReplyList");
                    List<ReviewReply> reviewReplyList_temp = (List<ReviewReply>) msg.obj;
                    reviewReplyList = new ArrayList<>();

                    if(reviewReplyList_temp.size() > 0) {
                        // 리스트 셋팅
                        if(replyPage == 1) {
                            for(ReviewReply reviewReply : reviewReplyList_temp) {
                                reviewReplyList.add(reviewReply);
                            }
                        } else {
                            Log.d("[Review]", "replyPage : " + replyPage);
                            Log.d("[Review]", "댓글 사이즈1 : " + reviewReplyList.size());

                            reviewReplyList.addAll(replyListMapSelectedItems.get(getAdapterPosition()));
                            Log.d("[Review]", "댓글 사이즈2 : " + reviewReplyList.size());
                            for(ReviewReply reviewReply : reviewReplyList_temp) {
                                reviewReplyList.add(reviewReply);
                            }
                            Log.d("[Review]", "댓글 사이즈3 : " + reviewReplyList.size());
                        }

                        // 댓글 리사이클러뷰 셋팅
                        if(reviewReplyList.size() > 0) {
                            List<ReviewReply> mapInList = new ArrayList<>();
                            mapInList.addAll(reviewReplyList);
                            replyListMapSelectedItems.clear();
                            replyListMapSelectedItems.put(getAdapterPosition(), mapInList);

                            if(replyPage == 1) {
                                setRecyclerView(reviewReplyList);
                            } else {
                                Log.d("[Review]", "reviewReplyList.size() : " + reviewReplyList.size());
                                channelReviewReplyAdapter.setList(reviewReplyList);
                                channelReviewReplyAdapter.notifyDataSetChanged();
                            }
                        }

                        // 리플 갯수에 따른 더보기 버튼 활성화 처리
                        int total = msg.arg1;       // 받아온 리스트 갯수
                        int totalAll = msg.arg2;    // 디비에 저장된 총 갯수

                        if(total > 0 && totalAll > 20) {
                            if(totalAll != reviewReplyList.size()) {
                                btn_reply_open.setVisibility(View.VISIBLE);
                                replyOpenSelectedItems.put(getAdapterPosition(), true);
                            } else {
                                btn_reply_open.setVisibility(View.GONE);
                                replyOpenSelectedItems.delete(getAdapterPosition());
                            }
                        }
                    } else {
                        Log.d("[ReviewReply]", "reviewReplyList is null!!!");
                    }

                    notifyDataSetChanged();   // 리뷰 어뎁터 갱신
                } else if(msg.what == MSG_REVIEW_DELETE) {  // 리뷰 삭제
                    String rt = (String) msg.obj;
                    if(rt != null) {
                        if (rt.equals("ReviewBoardDelete_OK")) {
                            Toast.makeText(activity, "리뷰가 삭제되었습니다.", Toast.LENGTH_SHORT).show();
                            reviewCount = msg.arg1;

                            // 삭제한 리뷰에 달려있던 댓글도 삭제
                            replyListMapSelectedItems.delete(getAdapterPosition());

                            // 삭제한 리뷰의 댓글 입력창이 열려 있으면 댓글 입력창 오픈 상태 초기화
                            if(replyOpenSelectedItems.get(getAdapterPosition())) {
                                replyOpenSelectedItems.clear();
                            }

                            // 삭제한 리뷰 어뎁터 갱신
                            func_listItemDelete(getAdapterPosition(), reviewCount);

                            connector.reviewList(msgHandler, context, channelIdx, memberIdx, filterType, rePage);
                        }
                    }
                } else if(msg.what == MSG_REVIEW_MODIFY) {  // 리뷰 수정
                    String rt = (String) msg.obj;
                    if(rt != null) {
                        if (rt.equals("ReviewBoardModify_OK")) {
                            Toast.makeText(activity, "리뷰가 수정되었습니다.", Toast.LENGTH_SHORT).show();

                            connector.reviewList(msgHandler, context, channelIdx, memberIdx, filterType, rePage);
                        }
                    }
                } else if(msg.what == MSG_REPLY_INSERT) {   // 댓글(리플) 작성
                    int replyCount = msg.arg1;
                    if(replyCount > 0) {
                        Toast.makeText(activity, "댓글이 작성되었습니다.", Toast.LENGTH_SHORT).show();
                        reviewBoard.setReplyCount(replyCount);
                        tv_item_totalcount.setText("댓글 "+replyCount+"개");
                        Log.d("[ReviewReplyInsert]", "replyCount : " + replyCount);

                        replyPage = 1;  // 댓글 페이지 초기화
                        connector.reviewReplyList(msgHandler, context, reviewBoard.getReviewIdx(), replyPage);
                        if (!replyListSelectedItems.get(getAdapterPosition())) {    // 댓글 리스트 접혀져 있을 때
                            replyListSelectedItems.clear();
                            replyOpenSelectedItems.clear();
                            replyListSelectedItems.put(getAdapterPosition(), true);
                        }

                        if(replyCount != 1 && replyCount % 20 == 1) {
                            btn_reply_open.setVisibility(View.VISIBLE);
                            replyOpenSelectedItems.put(getAdapterPosition(), true);
                        } else {
                            btn_reply_open.setVisibility(View.GONE);
                            replyOpenSelectedItems.delete(getAdapterPosition());
                        }
                    }
                } else if(msg.what == MSG_REVIEW_LOVE_HATE) {   // 좋아요 싫어요
                    String rt = (String) msg.obj;
                    if(rt != null) {
                        int love = msg.arg1;
                        int hate = msg.arg2;
                        tv_item_likeup.setText(String.valueOf(love));
                        tv_item_likedown.setText(String.valueOf(hate));

                        if(rt.equals("ReviewBoardLove_OK") || rt.equals("HateChange_OK")) {
                            // ReviewBoardLove_OK : 좋아요 클릭,  HateChange_OK : 싫어요 눌린 상태에서 좋아요
                            loveHateSetting(1);
                        } else if(rt.equals("ReviewBoardHate_OK") || rt.equals("LoveChange_OK")) {
                            // ReviewBoardHate_OK : 싫어요 클릭, LoveChange_OK : 좋아요 눌린 상태에서 싫어요
                            loveHateSetting(2);
                        } else if(rt.equals("LoveDelete_OK") || rt.equals("HateDelete_OK")) {
                            // LoveDelete_OK : 좋아요 취소 (눌린 상태에서 한번 더 클릭), HateDelete_OK : 싫어요 취소 (눌린 상태에서 한번 더 클릭)
                            loveHateSetting(3);
                        }
                    }
                } else if(msg.what == MSG_REVIEW_REPLY_REPORT) {    // 신고
                    String rt = (String) msg.obj;
                    Log.d("[Review]", "rt : " + rt);
                    if(rt != null) {
                        if(rt.equals("ReportWrite_OK")) {
                            Log.d("[Review]", "ReportWrite_OK");
                            Toast.makeText(activity, "신고가 접수되었습니다.", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(activity, "신고가 접수되지 않았습니다.", Toast.LENGTH_SHORT).show();
                        }
                    }
                } else if(msg.what == MSG_REVIEW_LIST) {    // 삭제, 수정 후 리뷰 리스트 받아오기
                        Log.d("[ChannelReviewAdapter]", "ReviewBoard");

                        List<ReviewBoard> tempList = (List<ReviewBoard>) msg.obj;
                        if (tempList.size() > 0) {
                            Log.d("[ChannelReviewAdapter]", "tempList.size() : " + tempList.size());

                            if(reList == null) reList = new ArrayList<>();

                            // 리사이클러 뷰 셋팅
                            for(ReviewBoard reviewBoard : tempList) {
                                reList.add(reviewBoard);
                            }

                            Log.d("[ChannelReviewAdapter]", "reviewPage_temp1 : " + reviewPage_temp);
                            reviewPage_temp--;
                            Log.d("[ChannelReviewAdapter]", "reviewPage_temp2 : " + reviewPage_temp);

                            // 리사이클러뷰 셋팅
                            if(reviewPage_temp > 0) {
                                rePage++;

                                connector.reviewList(msgHandler, context, channelIdx, memberIdx, filterType, rePage);
                            } else {
                                reviewPage_temp = reviewPage;
                                rePage = 1;
                                list.clear();
                                list.addAll(reList);
                                reList.clear();

                                notifyDataSetChanged();
                            }
                        } else {
                            Log.d("[ReviewBoardDetail]", "reviewBoard is null");
                            // 리뷰 삭제 후 리뷰의 갯수가 0개면 리스트 비우고 화면 갱신
                            list.clear();
                            notifyDataSetChanged();
                        }
                    }
                }
        };

        // 좋아요, 싫어요 셋팅
        private void loveHateSetting(int num) {
            switch (num) {
                case 1:     // 좋아요 클릭, 싫어요 눌린 상태에서 좋아요 클릭
                    Glide.with(activity).load(R.drawable.good_select).into(iv_item_likeup);
                    Glide.with(activity).load(R.drawable.bad).into(iv_item_likedown);
                    break;
                case 2:     // 싫어요 클릭, 좋아요 눌린 상태에서 싫어요 클릭
                    Glide.with(activity).load(R.drawable.bad_select).into(iv_item_likedown);
                    Glide.with(activity).load(R.drawable.good).into(iv_item_likeup);
                    break;
                case 3:     // 좋아요 취소 (눌린 상태에서 한번 더 클릭), 싫어요 취소 (눌린 상태에서 한번 더 클릭)
                    Glide.with(activity).load(R.drawable.bad).into(iv_item_likedown);
                    Glide.with(activity).load(R.drawable.good).into(iv_item_likeup);
                    break;
            }
        }

        // 댓글(리플) 리사이클러뷰 셋팅
        private void setRecyclerView(List<ReviewReply> reviewReplyList) {
            LinearLayoutManager replyManager = new LinearLayoutManager(activity);
            recyclerView.setLayoutManager(replyManager);
            channelReviewReplyAdapter = new ChannelReviewReplyAdapter(reviewReplyList, activity, itemView, channelReviewAdapterCustom);
            channelReviewReplyAdapter.setChannelIdx(channelIdx);
            channelReviewReplyAdapter.setReviewIdx(reviewBoard.getReviewIdx());
            channelReviewReplyAdapter.setMember(member);
            channelReviewReplyAdapter.setReviewBoard(reviewBoard);
            recyclerView.setAdapter(channelReviewReplyAdapter);
            recyclerView.setVisibility(View.VISIBLE);
        }

        // 댓글 리스트 표시 리스너
        TextView.OnClickListener sOnClickListener = new TextView.OnClickListener() {
            @Override
            public void onClick(View v) {
                reply_total = reviewBoard.getReplyCount();  // 리플 갯수

                if(reply_total > 0) {
                    if (replyListSelectedItems.get(getAdapterPosition())) { // 열려있는 상태일때,
                        // 댓글 리스트 닫기
                        recyclerView.setVisibility(View.GONE);
                        replyListSelectedItems.delete(getAdapterPosition());
                        // 댓글 더보기 버튼이 보여지고 있으면
                        if(replyOpenSelectedItems.get(getAdapterPosition())) {
                            btn_reply_open.setVisibility(View.GONE);
                            replyOpenSelectedItems.delete(getAdapterPosition());
                        }
                    } else {    // 닫혀있는 상태일때,
                        reviewManager.scrollToPositionWithOffset(getAdapterPosition(), 0);  // 리뷰 위치 설정
                        replyPage = 1;
                        replyListSelectedItems.clear();     // 댓글 리스트 열림 상태 초기화(닫혀있는 상태)
                        replyOpenSelectedItems.clear();     // 댓글 더보기 버튼 여부 초기화(댓글 더보기 안보이는 상태)
                        replyListSelectedItems.put(getAdapterPosition(), true); // 해당 포지션 댓글 리스트 열림으로 셋팅
                        connector.reviewReplyList(msgHandler, context, reviewBoard.getReviewIdx(), replyPage);
                    }
                }
            }
        };
        // 장문의 리뷰 내용 상세보기 리스너
        TextView.OnClickListener mOnClickListener = new TextView.OnClickListener(){
            @Override
            public void onClick(View v) {
                if(isContentOpen) {        //상세 내용 표시 중
                    /*클릭 -> 간략 보기로 변경*/
                    tv_item_content.setVisibility(View.VISIBLE);
                    tv_item_contentall.setVisibility(View.GONE);
                    tv_item_showdetail.setText("자세히 보기");
                    isContentOpen = false;
                } else {                   //간략 내용 표시 중
                    /*클릭 -> 간략 보기로 변경*/
                    tv_item_content.setVisibility(View.GONE);
                    tv_item_contentall.setVisibility(View.VISIBLE);
                    tv_item_showdetail.setText("접기");
                    isContentOpen = true;
                }
            }
        };
        // 리뷰 삭제, 수정, 신고 리스너
        ImageView.OnClickListener iOnClickListener = new ImageView.OnClickListener() {
            @Override
            public void onClick(View v) {
                final String[] items;

                if(member.getMemberIdx() != reviewBoard.getMemberIdx()) {

                    // 이미 신고한 리뷰인지 체크 하여 리턴
                    String rt = connector.reportCheck(msgHandler, context, member.getMemberIdx(), reviewBoard.getReviewIdx(), -1);
                    if (rt.equals("check_FAIL")) {
                        items = new String[]{"신고완료한 리뷰"};
                    } else {
                        items = new String[]{"리뷰 신고"};
                    }
                } else {
                    items = new String[]{"리뷰 수정", "리뷰 삭제"};
                }

                AlertDialog.Builder builder = new AlertDialog.Builder(activity);
                builder.setCancelable(true);
                builder.setItems(items, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (items[which].equals("신고완료한 리뷰")) {
                            dialog.dismiss();
                        } else if(items[which].equals("리뷰 신고")) {
                            final AlertDialog.Builder builder2 = new AlertDialog.Builder(activity);
                            final String[] items = {"욕설", "부적절한 용어", "비난", "기타"};
                            final int[] reportType = new int[1];
                            reportType[0] = -1;
                            builder2.setCancelable(true);
                            builder2.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    reportType[0] = which;
                                    Log.d("[REVIEWNOTIFY]", "[ADAPTER] reportType[0](1) = " + reportType[0]);
                                    Log.d("[REVIEWNOTIFY]", "[ADAPTER] items[reportType[0] = " + items[reportType[0]]);
                                }
                            });
                            builder2.setNegativeButton("신고", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    /*
                                        버튼클릭시 다이얼로그가 강제로 종료 되는것을 막기위해
                                        버튼 생성만 해준뒤 알러트다이얼로그 생성 완료 후
                                        버튼에 대한 이벤트처리를 다시 정의 해준다.
                                        밑에서 새로 정의한 버튼에서는 dismiss를 통해 다이얼로그 종료
                                        처리를 해주어야한다.
                                     */
                                }
                            });
                            builder2.setPositiveButton("취소", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                }
                            });
                            alertDialog = builder2.create();
                            alertDialog.setTitle("신고내용");
                            alertDialog.show();
                            alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE)
                                    .setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Log.d("[REVIEWNOTIFY]", "[ADAPTER] reportType[0](2) = " + reportType[0]);
                                            if (0 <= reportType[0] && reportType[0] <= 3) {
                                                connector.reviewReplyReport(msgHandler, context, channelIdx, memberIdx,
                                                        reviewBoard.getReviewComment(), reviewBoard.getReviewIdx(), -1, reportType[0]);
                                                alertDialog.dismiss();
                                            } else {
                                                Toast.makeText(activity, "신고항목을 선택해주세요.", Toast.LENGTH_SHORT).show();
                                            }
                                        }
                                    });
                        } else if(items[which].equals("리뷰 수정")) {
                            View dialogView = activity.getLayoutInflater().inflate(R.layout.dialog_channel_review_modify, null);
                            AlertDialog.Builder builder4 = new AlertDialog.Builder(activity);
                            bt_yes = dialogView.findViewById(R.id.bt_yes);
                            bt_no = dialogView.findViewById(R.id.bt_no);
                            tv_check = dialogView.findViewById(R.id.tv_check);
                            et_review_modify = dialogView.findViewById(R.id.et_review_modify);

                            et_review_modify.setText(reviewBoard.getReviewComment());

                            bt_yes.setOnClickListener(bOnClickListener);
                            bt_no.setOnClickListener(bOnClickListener);

                            tv_check.setVisibility(View.GONE);

                            builder4.setView(dialogView);
                            builder4.setCancelable(true);
                            alertDialog = builder4.create();
                            alertDialog.show();
                        } else if(items[which].equals("리뷰 삭제")) {
                            androidx.appcompat.app.AlertDialog.Builder builder3 = new androidx.appcompat.app.AlertDialog.Builder(activity);
                            builder3.setMessage("해당 리뷰를 삭제하시겠습니까?");
                            builder3.setCancelable(true);
                            builder3.setNegativeButton("예", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    connector.reviewDelete(msgHandler, context, reviewBoard.getReviewIdx(), memberIdx);
                                }
                            });
                            builder3.setPositiveButton("아니오", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                }
                            });
                            androidx.appcompat.app.AlertDialog alertDialog2 = builder3.create();
                            alertDialog2.setTitle("리뷰 삭제");
                            alertDialog2.show();
                        }
                    }
                });
                AlertDialog alertDialog = builder.create();
                alertDialog.show();
            }
        };
        // 리뷰 수정 버튼 클릭 리스너
        Button.OnClickListener bOnClickListener = new TextView.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 키보드 자판을 내림[강제적으로]
                imm.hideSoftInputFromWindow(et_review_modify.getWindowToken(),0);
                switch (v.getId()) {
                    case R.id.bt_yes:
                        review_modify = et_review_modify.getText().toString().trim();
                        if (review_modify.equals("")) {
                            tv_check.setVisibility(View.VISIBLE);
                            tv_check.setText("*수정할 내용을 입력해주세요.");
                            tv_check.setTextColor(Color.RED);
                        } else if (reviewBoard.getReviewComment().equals(review_modify)) {
                            tv_check.setVisibility(View.VISIBLE);
                            tv_check.setText("*현재 리뷰와 동일합니다.");
                            tv_check.setTextColor(Color.RED);
                        } else {
                            tv_check.setVisibility(View.GONE);
                            reviewBoard.setReviewComment(review_modify);
                            connector.reviewModify(msgHandler, context, reviewBoard);
                            alertDialog.dismiss();
                            alertDialog = null;
                        }
                        break;
                    case R.id.bt_no:
                        alertDialog.dismiss();
                        alertDialog = null;
                        break;
                }
            }
        };
        // 댓글 쓰기창 오픈 리스너
        TextView.OnClickListener vOnClickListener = new TextView.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("[ReplyOpenListener]", "getAdapterPosition() : " + getAdapterPosition());

                if(member != null) {
                    fb_item_insert.setEnabled(true);
                } else {
                    et_item_insertReply.setText("로그인을 하셔야 댓글을 작성하실 수 있습니다.");

                    et_item_insertReply.setEnabled(false);
                    fb_item_insert.setEnabled(false);
                }

                if(replySelectedItems.get(getAdapterPosition())) {  // 열려있는 상태
                    lay_item_replyform.setVisibility(View.GONE);
                    replySelectedItems.delete(getAdapterPosition());
                } else {    // 닫혀있는 상태
                    lay_item_replyform.setVisibility(View.VISIBLE);
                    replySelectedItems.clear();
                    replySelectedItems.put(getAdapterPosition(), true);
                    notifyDataSetChanged();
                }
            }
        };
        // 댓글 작성 및 취소 리스너
        FrameLayout.OnClickListener fOnClickListener = new FrameLayout.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (v.getId()) {
                    case R.id.fb_item_cancel:
                        et_item_insertReply.setText("");
                        lay_item_replyform.setVisibility(View.GONE);
                        replySelectedItems.delete(getAdapterPosition());
                        break;
                    case R.id.fb_item_insert:
                        if(member != null) {
                            // 키보드 자판을 내림[강제적으로]
                            imm.hideSoftInputFromWindow(et_item_insertReply.getWindowToken(),0);
                            String insert_reply = et_item_insertReply.getText().toString();
                            et_item_insertReply.setText("");

                            if(!insert_reply.trim().equals("")) {
                                ReviewReply reviewReply = new ReviewReply();
                                reviewReply.setReviewIdx(reviewBoard.getReviewIdx());
                                reviewReply.setMemberIdx(member.getMemberIdx());
                                reviewReply.setRpelyComment(insert_reply);

                                connector.reviewReplyInsert(msgHandler, context, reviewReply, channelIdx);
                            } else {
                                Toast.makeText(activity, "댓글을 입력해주세요.", Toast.LENGTH_SHORT).show();
                            }
                        }
                        break;
                }
            }
        };
        // 좋아요, 싫어요 클릭 리스너
        ImageView.OnClickListener lhOnClickListener = new ImageView.OnClickListener() {
            @Override
            public void onClick(View v) {
                int lovetype = -1;
                if(member != null) {
                    switch (v.getId()) {
                        case R.id.iv_item_likeup:   // 좋아요 클릭
                            lovetype = 0;
                            break;
                        case R.id.iv_item_likedown: // 싫어요 클릭
                            lovetype = 1;
                            break;
                    }
                    connector.reviewLoveHate(msgHandler, context, reviewBoard.getReviewIdx(), member.getMemberIdx(), lovetype);
                }
            }
        };
        // 댓글 더보기 클릭 리스너
        Button.OnClickListener opOnClickListener = new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
                replyPage++;
                channelReviewReplyAdapter.setReplyPage(replyPage);
                connector.reviewReplyList(msgHandler, context, reviewBoard.getReviewIdx(), replyPage);
            }
        };

        // 댓글 어뎁터에서 댓글 더보기 안보여야 할 때, 호출할 함수
        public void fun_replyOpenSelectedItems_position_delete() {
            replyOpenSelectedItems.delete(getAdapterPosition());
        }
        // 댓글 어뎁터에서 댓글 리스트 안보여야 할 때, 호출할 함수
        public void fun_replyListSelectedItems_position_delete() {
            replyListSelectedItems.delete(getAdapterPosition());
        }
        // ReplyAdapter에서 댓글 삭제 시 데이터 셋팅받는 함수
        public void fun_reply_delete_list_settion(List<ReviewReply> list) {
            replyListMapSelectedItems.put(getAdapterPosition(), list);
        }
    }

    // 리스트 아이템 삭제 함수
    private void func_listItemDelete(int position, int reviewCount) {
        // 어댑터에서 RecyclerView에 반영하도록 합니다.
        notifyItemRemoved(position);
        notifyItemRangeChanged(position, getItemCount());

        // 삭제 후 리뷰 갯수 재설정
        tv_review_count.setText("리뷰 " + reviewCount + "개");
    }

    // 리뷰 갯수 리턴해주는 함수
    public int getReviewCount() {
        return reviewCount;
    }

    // 리뷰 리스트
    public List<ReviewBoard> setList() {
        return list;
    }

}