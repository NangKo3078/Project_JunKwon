/*
    박준권
    - 리뷰 Tap 별점 페이지
 */
public class ChannelReviewFragment extends Fragment  {
    // 객체 선언
    private LinearLayout linear_ratingInsert;
    private RatingBar rb_reviewScore;
    private View rootView;
    private Member member;
    private int memberIdx;
    private int channelIdx;
    private int filterType;
    private int page;
    private int totalAll;   // 채널의 모든 리뷰 갯수
    private SilverTubeConnector connector;
    private LinearLayout lay_top_review, lay_top_reviewSelector, lay_ad;
    private FragmentManager fragmentManager;
    private List<ReviewBoard> reviewBoardList;
    private Button btn_grade_insert;
    private TextView tv_rating_day_before, tv_rating_day_affter;
    private boolean myReviewReply = true;

    private OnBackPressedDispatcher dispatcher;
    private final int MSG_REVIEW = 0;        // 리뷰 별점 받아오기
    private final int MSG_REVIEW_LIST = 1;   // 리뷰 리스트 받아오기
    private final int MSG_REVIEW_GRADE_INSERT = 5;    // 별점 저장
    private final int MSG_REVIEW_MEMBER_GRADE = 7;    // 로그인한 유저의 별점 받아오기
    private Handler msgHandler = new Handler() {
        @Override
        public void handleMessage(@NonNull Message msg) {
            //Log.d("[Review]", "REVIEW handleMessage 진입!!");
            if(msg.what == MSG_REVIEW) {                // 리뷰 별점 받아오기
                //Log.d("[Review]", "Review");
                Review review = (Review) msg.obj;

                if(review != null) {
                    setReview(review);
                } else {
                    //Log.d("[Review]", "review is null");
                }
            } else if(msg.what == MSG_REVIEW_LIST) {    // 리뷰 리스트 받아오기
                //Log.d("[Review]", "ReviewBoard");
                reviewBoardList = (List<ReviewBoard>) msg.obj;
                totalAll = msg.arg1;
                if (reviewBoardList.size() > 0) {
                    View child = getLayoutInflater().inflate(R.layout.item_top_review_list, null);
                    ImageView iv_item_profile = child.findViewById(R.id.iv_item_profile);
                    TextView tv_item_content = child.findViewById(R.id.tv_item_content);
                    Glide.with(getActivity()).load(reviewBoardList.get(0).getUserImage()).into(iv_item_profile);
                    tv_item_content.setText(reviewBoardList.get(0).getReviewComment());

                    //총 리뷰 갯수
                    TextView tv_review_count = rootView.findViewById(R.id.tv_review_count);
                    tv_review_count.setText("리뷰 " + totalAll + "개");

                    lay_top_review.addView(child);

                    if (((ChannelActivity) getActivity()).getMyReviewReplyClick() && myReviewReply) {
                        Bundle bundle = new Bundle();
                        bundle.putSerializable("reviewBoardList", (Serializable) reviewBoardList);
                        bundle.putSerializable("member", member);
                        bundle.putInt("channelIdx", channelIdx);
                        bundle.putInt("totalAll", totalAll);
                        changeFragment(bundle);
                        myReviewReply = false;
                    }

                    lay_top_reviewSelector.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Bundle bundle = new Bundle();
                            bundle.putSerializable("reviewBoardList", (Serializable) reviewBoardList);
                            bundle.putSerializable("member", member);
                            bundle.putInt("channelIdx", channelIdx);
                            bundle.putInt("totalAll", totalAll);
                            changeFragment(bundle);
                        }
                    });
                } else {
                    //Log.d("[Review]", "reviewBoard is null");
                }
            } else if(msg.what == MSG_REVIEW_GRADE_INSERT) {    // 별점 등록
                String rt = (String) msg.obj;

                if(rt != null) {
                    Toast.makeText(getActivity(), "별점 등록이 완료되었습니다.", Toast.LENGTH_SHORT).show();
                    fragmentRefresh();
                }
            } else if(msg.what == MSG_REVIEW_MEMBER_GRADE) {    // 로그인 유저 별점 받아오기
                String rt = (String) msg.obj;

                if(rt != null) {
                    int grade = msg.arg1;
                    int gradeDay = msg.arg2;
                    if(grade >= 0) {    // 별점을 등록되어 있음
                        rb_reviewScore.setRating(grade);
                        Date currentTime = Calendar.getInstance().getTime();
                        SimpleDateFormat dayFormat = new SimpleDateFormat("dd", Locale.getDefault());
                        int toDay = Integer.parseInt(dayFormat.format(currentTime));

                        //Log.d("[grade]", "gradeDay : " + gradeDay);
                        //Log.d("[grade]", "toDay : " + toDay);

                        if(gradeDay == toDay) {  // 오늘 별점을 등록했을 때,
                            gradeVisibleSetting(1);
                        } else {    // 오늘 별점을 등록하지 않았을 때,
                            gradeVisibleSetting(2);
                        }
                    } else {    // 별점이 등록되어 있지 않음
                        gradeVisibleSetting(2);
                    }
                }
            }
        }
    };

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.fragment_channel_review, container, false);

        // 객체 초기화
        linear_ratingInsert = rootView.findViewById(R.id.linear_ratingInsert);
        rb_reviewScore = rootView.findViewById(R.id.rb_reviewScore);
        lay_top_review = rootView.findViewById(R.id.lay_top_review);
        lay_top_reviewSelector = rootView.findViewById(R.id.lay_top_reviewSelector);
        lay_ad = rootView.findViewById(R.id.lay_ad);
        btn_grade_insert = rootView.findViewById(R.id.btn_grade_insert);
        fragmentManager = getActivity().getSupportFragmentManager();
        dispatcher = getActivity().getOnBackPressedDispatcher();
        tv_rating_day_before = rootView.findViewById(R.id.tv_rating_day_before);
        tv_rating_day_affter = rootView.findViewById(R.id.tv_rating_day_affter);

        // 서버 연동 리스트 받아오기
        connector = new SilverTubeConnector();

        // 채널 idx값 받아오기
        channelIdx = ((ChannelActivity) getActivity()).getChannelIdx();

        // 유저 로그인 상태 : 로그인 정보 받아오기 & 로그인 상태 화면 셋팅(별점주기)
        if(((ChannelActivity) getActivity()).getMember() != null) {
            member = ((ChannelActivity) getActivity()).getMember();
            if(member != null) memberIdx = member.getMemberIdx();

            linear_ratingInsert.setVisibility(View.VISIBLE); // 별점주기 영역 open

            if(channelIdx > 0) {
                connector.memberGrade(msgHandler, getContext(), member.getMemberIdx(), channelIdx);
            }
        } else {
            linear_ratingInsert.setVisibility(View.GONE);   // 별점주기 영역 close
        }

        // 리뷰 페이지, 정렬 초기화
        page = 1;
        filterType = 0; // 이곳에선 filterType은 무조건 기본값

        connector.review(msgHandler, getContext(), channelIdx);
        connector.reviewList(msgHandler, getContext(), channelIdx, memberIdx, filterType, page);

        // 리뷰 리스트 open 클릭 이벤트
        lay_top_reviewSelector.setOnClickListener(layOnClickListener);

        // 별점주기 버튼 클릭 이번트
        btn_grade_insert.setOnClickListener(bgOnClickListener);

        // 광고 삽입
        View adsView = new AdsView(getContext()).getView();
        lay_ad.addView(adsView);
        lay_ad.setGravity(Gravity.CENTER);

        return rootView;
    }

    // 리뷰 상단 별점부분 셋팅 함수
    private void setReview(Review review) {
        TextView tv_grade, tv_grade_five, tv_grade_four, tv_grade_three, tv_grade_two, tv_grade_one;
        ProgressBar pb5, pb4, pb3, pb2, pb1;
        RatingBar rb_grade;

        tv_grade = rootView.findViewById(R.id.tv_grade);
        tv_grade_five = rootView.findViewById(R.id.tv_grade_five);
        tv_grade_four = rootView.findViewById(R.id.tv_grade_four);
        tv_grade_three = rootView.findViewById(R.id.tv_grade_three);
        tv_grade_two = rootView.findViewById(R.id.tv_grade_two);
        tv_grade_one = rootView.findViewById(R.id.tv_grade_one);
        rb_grade = rootView.findViewById(R.id.rb_grade);

        pb5 = rootView.findViewById(R.id.pb5);
        pb4 = rootView.findViewById(R.id.pb4);
        pb3 = rootView.findViewById(R.id.pb3);
        pb2 = rootView.findViewById(R.id.pb2);
        pb1 = rootView.findViewById(R.id.pb1);

        // 각 별점 갯수 텍스트 뷰 셋팅
        tv_grade_five.setText(String.valueOf(review.getGradeFive()));
        tv_grade_four.setText(String.valueOf(review.getGradeFour()));
        tv_grade_three.setText(String.valueOf(review.getGradeThree()));
        tv_grade_two.setText(String.valueOf(review.getGradeTwo()));
        tv_grade_one.setText(String.valueOf(review.getGradeOne()));
        tv_grade.setText(String.valueOf(review.getGrade()));
        rb_grade.setRating((float) review.getGrade());

        // 홈화면 별점 셋팅
        if((float) review.getGrade() > 0) {
            ChannelPagerAdaper channelPagerAdaper = ((ChannelActivity) getActivity()).getChannelPagerAdaper();
            if(channelPagerAdaper != null) {
                Fragment channelHomeFragment = channelPagerAdaper.getItem(0);
                //Log.d("[asd]", "channelHomeFragment : " + channelHomeFragment.toString());
                ((ChannelHomeFragment) channelHomeFragment).fun_setRatingScore((float) review.getGrade(), true);
            }
        }
        // 각 별점 갯수 프로그래스바 셋팅
        int totalGrade = review.getGradeFive() + review.getGradeFour() + review.getGradeThree() + review.getGradeTwo() + review.getGradeOne();

        float gradeFive = (float)review.getGradeFive() / totalGrade * 100;
        float gradeFour = (float)review.getGradeFour() / totalGrade * 100;
        float gradeThree = (float)review.getGradeThree() / totalGrade * 100;
        float gradeTwo = (float)review.getGradeTwo() / totalGrade * 100;
        float gradeOne = (float)review.getGradeOne() / totalGrade * 100;

        pb5.setProgress((int)gradeFive);
        pb4.setProgress((int)gradeFour);
        pb3.setProgress((int)gradeThree);
        pb2.setProgress((int)gradeTwo);
        pb1.setProgress((int)gradeOne);

        //총 리뷰 갯수
        TextView tv_review_count = rootView.findViewById(R.id.tv_review_count);
        tv_review_count.setText("리뷰 " + totalAll+"개");
    }

    // 리뷰 리스트 open 리스너
    LinearLayout.OnClickListener layOnClickListener = new ImageView.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.lay_top_reviewSelector:
                    if(member != null) {
                        //Log.d("[Review]", "member is notNull");
                        Bundle bundle = new Bundle();
                        bundle.putSerializable("member", member);
                        bundle.putInt("channelIdx", channelIdx);
                        changeFragment(bundle);
                    } else {
                        Bundle bundle = new Bundle();
                        bundle.putInt("channelIdx", channelIdx);
                        changeFragment(bundle);
                    }

                    break;
            }
        }
    };

    // 별점주기 버튼 클릭 리스너
    Button.OnClickListener bgOnClickListener = new Button.OnClickListener() {
        @Override
        public void onClick(View v) {
            int grade = (int) rb_reviewScore.getRating();

            if(grade > 0) {
                connector.gradeAppraisement(msgHandler, getContext(), member.getMemberIdx(), channelIdx, grade);
            } else {
                Toast.makeText(getActivity(), "0점은 줄 수 없습니다.", Toast.LENGTH_SHORT).show();
            }
        }
    };

    // 별점 등록여부에 따라 별점등록 여부 셋팅함수
    private void gradeVisibleSetting(int num) {
        switch (num) {
            case 1: // 별점이 등록되어 있어 별점 등록 불가능하게 셋팅
                rb_reviewScore.setIsIndicator(true);
                btn_grade_insert.setVisibility(View.GONE);

                tv_rating_day_before.setVisibility(View.GONE);
                tv_rating_day_affter.setVisibility(View.VISIBLE);
                break;
            case 2: // 별점이 등록되지 않아 별점 등록 가능하게 셋팅
                rb_reviewScore.setIsIndicator(false);
                btn_grade_insert.setVisibility(View.VISIBLE);

                tv_rating_day_before.setVisibility(View.VISIBLE);
                tv_rating_day_affter.setVisibility(View.GONE);
                break;
        }
    }

    private void changeFragment(Bundle bundle) {
        FragmentTransaction transaction = getFragmentManager().beginTransaction();
        Fragment fragment = this;

        ChannelReviewDetailFragment reviewFragment = new ChannelReviewDetailFragment();
        if(bundle!=null) {
            reviewFragment.setArguments(bundle);
        }
        transaction.detach(this).addToBackStack(null).setCustomAnimations(R.anim.slide_up_frag, R.anim.slide_down_frag).add(R.id.main_container, reviewFragment).commit();
        OnBackPressedCallback callback = new OnBackPressedCallback(true) {
            @Override
            public void handleOnBackPressed() {
                if(fragmentManager.getBackStackEntryCount()==0) {
                    this.remove();
                    getActivity().finish();
                }
                else {
                    if(!fragmentManager.isStateSaved()) {
                        fragmentManager.popBackStackImmediate(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    }

                }
            }
        };

        dispatcher.addCallback(callback);
    }

    // 프래그먼트 갱신
    public void fragmentRefresh() {
        //프래그먼트 새로고침
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        ft.detach(this).attach(this).commit();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if(dispatcher!=null) {
            dispatcher = null;
        }
    }
}