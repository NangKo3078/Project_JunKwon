/*
    박준권
    - 자동 로그인 체크 및 뒤로가기 2번 클릭 시 앱 종료 작업
    - 상황에 따라 Fragment 화면영역에 보여줄 Fragment 셋팅 작업
    - 하단의 메뉴바 이동작업
 */
public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    // 객체 선언
    private Button buttonHome, buttonWrite, buttonAttention, buttonMyInfo, buttonSearch; // 각 게시판 이동 버튼
    private LinearLayout headLinearLayout;

    // 로그인 성공시 저장
    private Member member = null;

    // 통신 객체
    private AsyncHttpClient client;
    private HttpResponse response;
    // 통신연결용 URL
    private String url = "";

    // 뒤로가기 버튼
    private long backBtnTime = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        /* 객체 초기화 */
        // 레이아웃
        headLinearLayout = findViewById(R.id.headLinearLayout);

        // 각 게시판 이동 버튼
        buttonHome = findViewById(R.id.buttonHome);
        buttonWrite = findViewById(R.id.buttonWrite);
        buttonAttention = findViewById(R.id.buttonAttention);
        buttonMyInfo = findViewById(R.id.buttonMyInfo);
        buttonSearch = findViewById(R.id.buttonSearch);

        // 서버연동
        client = new AsyncHttpClient();
        response = new HttpResponse(this);

        /* 시작 시 화면 초기화 */
        if(savedInstanceState == null) {
            Log.d("[MainActivity]", "메인페이지 프래그먼트 셋팅");
            getSupportFragmentManager().beginTransaction().add(R.id.container, new MainPageFragment()).commit();
        }

        /* 시작 시 자동로그인인지 확인 */
        initAutoLogin();

        /* 이벤트 설정 */
        // 각 게시판 이동 버튼
        buttonHome.setOnClickListener(this);
        buttonWrite.setOnClickListener(this);
        buttonAttention.setOnClickListener(this);
        buttonMyInfo.setOnClickListener(this);
        buttonSearch.setOnClickListener(this);
    }

    // 화면이 뜰때 자동 로그인 여부 확인
    private void initAutoLogin() {
        // 자동 로그인 체크되있었는지 확인
        SharedPreferences pref = getSharedPreferences("autoLogin", MODE_PRIVATE);
        String prefData = pref.getString("user_id",null);

        // 자동 로그인설정이 되어있다면 로그인 통신 연결
        if(prefData != null){
            Log.d("[MainActivity]","onResume() if문 진입");
            Log.d("[MainActivity]", "prefData is notNull: " + prefData);
            RequestParams params = new RequestParams();
            params.put("user_id", prefData);

            client.post(url, params, response);
        } else {
            Log.d("[MainActivity]", "prefData is null");
        }
    }

    // 클릭 이벤트 구현
    @Override
    public void onClick(View v) {
        // 화면 전환 프래그먼트 선언
        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
        String fragmentTag;
        Fragment fragment;
        Intent intent;

        // 로그인과 상관없이 이동 가능한 페이지
        switch (v.getId()) {
            case R.id.buttonHome:      // 홈
                fragment = new MainPageFragment();
                fragmentTag = fragment.getClass().getSimpleName();
                getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                fragmentTransaction.replace(R.id.container, fragment).addToBackStack(fragmentTag).commit();
                return;
            case R.id.buttonSearch:    // 검색
                fragment = new SearchFragment();
                fragmentTag = fragment.getClass().getSimpleName();
                getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                fragmentTransaction.replace(R.id.container, fragment).addToBackStack(fragmentTag).commit();
                return;
        }

        // 로그인 상태여야지만 이동 가능한 페이지
        if(member == null) {
            intent = new Intent(this, LoginActivity.class);
            startActivity(intent);
        } else {
            // 로그인상태 일때만 클릭 이벤트 동작
            switch (v.getId()) {
                case R.id.buttonSearch:    // 검색
                    fragment = new MyAlarmFragment();
                    fragmentTag = fragment.getClass().getSimpleName();
                    getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    fragmentTransaction.replace(R.id.container, fragment).addToBackStack(fragmentTag).commit();
                    break;
                case R.id.buttonWrite:          // 새 글쓰기
                    intent = new Intent(this, BoardWriteActivity.class);
                    intent.putExtra("member", member);
                    startActivityForResult(intent, 500);
                    break;
                case R.id.buttonAttention:      // 내 관심
                    fragment = new AttentionFragment();
                    fragmentTag = fragment.getClass().getSimpleName();
                    getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    fragmentTransaction.replace(R.id.container, fragment).addToBackStack(fragmentTag).commit();
                    break;
                case R.id.buttonMyInfo:         // 내 정보
                    fragment = new MyInfoFragment();
                    fragmentTag = fragment.getClass().getSimpleName();
                    getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    fragmentTransaction.replace(R.id.container, fragment).addToBackStack(fragmentTag).commit();
                    break;
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode == 500) {
            if(resultCode == RESULT_OK) {
                int category =  data.getIntExtra("category", 0);
                int board_seq = data.getIntExtra("board_seq", 0);

                Fragment fragment_boardView = new BoardViewFragment();
                FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment_boardView);
                String fragmentTag = fragment_boardView.getClass().getSimpleName();
                getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);

                Bundle bundle = new Bundle();
                bundle.putInt("category", category); // Key, Value
                if(category >= 4) {
                    bundle.putBoolean("category_check", true);
                }
                bundle.putInt("recently", 0);
                bundle.putInt("board_seq", board_seq);

                fragment_boardView.setArguments(bundle);
                fragmentTransaction.addToBackStack(fragmentTag).commit();
            }
        }
    }

    // 통신 응답 클래스
    class HttpResponse extends AsyncHttpResponseHandler {
        ProgressDialog dialog;
        Activity activity;

        public HttpResponse(Activity activity) {
            this.activity = activity;
        }

        // 통신 시작시 호출
        @Override
        public void onStart() {
//            dialog = new ProgressDialog(MainActivity.this);
//            dialog.setMessage("잠시만 기다려 주세요...");
//            dialog.setCancelable(false);
//            dialog.show();
        }

        // 통신 종료시 호출
        @Override
        public void onFinish() {
            if(dialog != null) {
//                dialog.dismiss();
//                dialog = null;
            }
        }

        // 통신 성공시 호출
        @Override
        public void onSuccess(int i, Header[] headers, byte[] bytes) {
            String str = new String(bytes);
            try {
                JSONObject json = new JSONObject(str);
                String rt = json.getString("rt");
                Log.d("[MainActivity]", "onSuccess 진입");
                Log.d("[MainActivity]", "rt error: " + rt);
                if(rt.equals("ID_OK")) {
                    JSONArray item = json.getJSONArray("item");
                    JSONObject temp = item.getJSONObject(0);

                    Log.d("[MainActivity]", "rt : " + rt);
                    member = new Member();
                    member.setUser_name(temp.getString("user_name"));
                    member.setUser_id(temp.getString("user_id"));
                    member.setUser_pwd(temp.getString("user_pwd"));
                    member.setPhone(temp.getString("phone"));
                    member.setEmail(temp.getString("email"));
                    member.setGender(temp.getString("gender"));
                    member.setAge(temp.getString("age"));
                    member.setClassImage(temp.getString("classImage"));
                    member.setClassName(temp.getString("className"));
                    member.setEx(temp.getInt("ex"));
                    member.setTotalEx(temp.getInt("totalEx"));
                    member.setCharacterImage(temp.getString("characterImage"));
                    member.setGroupNum(temp.getInt("groupNum"));
                    Log.d("[MainActivity]", "Success End");
                } else {
                    Log.d("[MainActivity]", "rt error: " + rt);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        // 통신 실패시 호출
        @Override
        public void onFailure(int i, Header[] headers, byte[] bytes, Throwable throwable) {
            //Toast.makeText(activity, "통신 실패", Toast.LENGTH_SHORT).show();
            Log.d("[MainActivity]", "로그인 통신 실패");
        }
    }

    // 로그인 정보 저장
    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);

        this.member = ((Member) intent.getSerializableExtra("member"));
        Log.d("[MainActivity]", "member : " + member.getUser_id());
    }

    // 메인 페이지에서 2번 누르면 종료
    @Override
    public void onBackPressed() {
        long curTime = System.currentTimeMillis();
        long gapTime = curTime - backBtnTime;

        if(getSupportFragmentManager().getBackStackEntryCount() == 0) {
            if (0 <= gapTime && 2000 >= gapTime) {
                super.onBackPressed();
            } else {
                backBtnTime = curTime;

                Toast.makeText(this, "한번 더 누르면 종료됩니다.", Toast.LENGTH_SHORT).show();
            }
        } else {
            getSupportFragmentManager().popBackStack();
        }
    }

    public Member getMember() {
        return member;
    }

    public LinearLayout getHeadLinearLayout() {
        return headLinearLayout;
    }
}