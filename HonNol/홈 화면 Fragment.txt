package com.example.honnol;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageButton;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ScrollView;

import com.example.honnol.adapter.BannerAdapter;
import com.example.honnol.adapter.RecommendAdapter;
import com.example.honnol.adapter.SupportersAdapter;
import com.example.honnol.model.Board;
import com.example.honnol.model.Supporters;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;
import com.rd.PageIndicatorView;
import com.rd.draw.controller.DrawController;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import cz.msebera.android.httpclient.Header;
import me.angeldevil.autoscrollviewpager.AutoScrollViewPager;

/*
    박준권
    - 메인화면 fragment
*/
public class MainPageFragment extends Fragment {
    // 객체 선언
    // top
    private AutoScrollViewPager viewPager;
    private BannerAdapter bannerAdapter;
    private List<Integer> bannerList;
    private PageIndicatorView indicatorView;

    // center
    private RecyclerView recyclerView;
    private RecommendAdapter recommendAdapter;
    private LinearLayoutManager linearLayoutManager;

    // Bottom
    private List<Supporters> supportersList;
    private SupportersAdapter supportersAdapter;
    private ListView listView;
    private ScrollView scrollView;

    // 게시판 이동 버튼
    private ImageButton ibGoNewBoard, ibGoSupports;
    private ImageButton ibFood, ibTip, ibIt, ibInterior;

    // 이미지버튼 클릭 이벤트 설정
    private ImageButton.OnClickListener onClickListener;


    //혼놀 정보 제공
    private AsyncHttpClient client;
    private HttpResponse response;
    // 통신연결용 URL
    private String URL_boardList = "";
    private String URL_supporters = "";

    private List<Board> list;
    private Board board;            // 게시판
    private Supporters supporters;  // 서포터즈

    public MainPageFragment() {
        initClickEvent();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_main_page, container, false);

        // 최신글, 커뮤니티 게시판 이동 버튼 객체 초기화
        ibGoNewBoard = rootView.findViewById(R.id.ibGoNewBoard);
        ibGoSupports = rootView.findViewById(R.id.ibGoSupports);
        ibFood = rootView.findViewById(R.id.ibFood);
        ibTip = rootView.findViewById(R.id.ibTip);
        ibIt = rootView.findViewById(R.id.ibIt);
        ibInterior = rootView.findViewById(R.id.ibInterior);

        /* Top */
        initTop(rootView);

        /* Center */
        initCenter(rootView);

        /* Bottom */
        initBottom(rootView);

        /* 버튼 이벤트 설정 */
        ibGoNewBoard.setOnClickListener(onClickListener);
        ibGoSupports.setOnClickListener(onClickListener);
        ibFood.setOnClickListener(onClickListener);
        ibTip.setOnClickListener(onClickListener);
        ibIt.setOnClickListener(onClickListener);
        ibInterior.setOnClickListener(onClickListener);

        return rootView;
    }

    @Override
    public void onResume() {
        super.onResume();
        // 혼놀 정보 제공 통신 연결
        list.clear();
        client = new AsyncHttpClient();
        response = new HttpResponse(getActivity());
        RequestParams params = new RequestParams();
        params.put("category", 4);
        params.put("recently", 0);
        client.post(URL_boardList, params, response);

        // 서포터즈 리스트 통신 연결
        supportersAdapter.clear();
        client.post(URL_supporters, response);
    }

    // 클릭 이벤트 설정
    private void initClickEvent() {
        onClickListener = new ImageButton.OnClickListener() {
            @Override
            public void onClick(View view) {
                Fragment fragment_boardList = new BoardListFragment();
                FragmentTransaction fragmentTransaction = getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment_boardList);
                String fragmentTag = fragment_boardList.getClass().getSimpleName();
                getActivity().getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                Bundle bundle = new Bundle();
                switch (view.getId()) {
                    case R.id.ibGoNewBoard: //혼족 최신 정보
                        bundle.putInt("category", 4); // Key, Value
                        bundle.putBoolean("category_check", true);
                        fragment_boardList.setArguments(bundle);
                        fragmentTransaction.addToBackStack(fragmentTag).commit();
                        break;
                    case R.id.ibGoSupports:
                        fragment_boardList.setArguments(bundle);
                        fragmentTransaction.addToBackStack(fragmentTag).replace(R.id.container, new SupportersListFragment()).commit();
                        break;
                    case R.id.ibFood:
                        bundle.putInt("category", 0); // Key, Value
                        fragment_boardList.setArguments(bundle);
                        fragmentTransaction.addToBackStack(fragmentTag).commit();
                        break;
                    case R.id.ibTip:
                        bundle.putInt("category", 1); // Key, Value
                        fragment_boardList.setArguments(bundle);
                        fragmentTransaction.addToBackStack(fragmentTag).commit();
                        break;
                    case R.id.ibIt:
                        bundle.putInt("category", 2); // Key, Value
                        fragment_boardList.setArguments(bundle);
                        fragmentTransaction.addToBackStack(fragmentTag).commit();
                        break;
                    case R.id.ibInterior:
                        bundle.putInt("category", 3); // Key, Value
                        fragment_boardList.setArguments(bundle);
                        fragmentTransaction.addToBackStack(fragmentTag).commit();
                        break;
                }
            }
        };
    }

    /**
     * 메인페이지 상단
     **/
    private void initTop(View rootView) {
        // 객체 초기화
        bannerList = new ArrayList<>();
        indicatorView = rootView.findViewById(R.id.pageIndicatorView);
        bannerAdapter = new BannerAdapter(getActivity(), bannerList);
        // 이미지 설정
        addBannerList();

        viewPager = rootView.findViewById(R.id.viewPager);
        viewPager.setAdapter(bannerAdapter);
        viewPager.setInterval(4000);
        viewPager.startAutoScroll();

        /* 이벤트 설정 */
        //  인디케이터 클릭 시 클릭 위치로 이동하는 이벤트
        indicatorView.setClickListener(new DrawController.ClickListener() {
            @Override
            public void onIndicatorClicked(int position) {
                viewPager.setCurrentItem(position);
            }
        });
    }
    private void addBannerList() {
        bannerList.add(R.raw.untitled1);
        bannerList.add(R.raw.untitled2);
        bannerList.add(R.raw.untitled3);
        bannerList.add(R.raw.untitled4);
    }

    /**
     * 중간 최신 게시글
     **/
    private void initCenter(View rootView) {
        recyclerView = rootView.findViewById(R.id.recyclerView);

        list = new ArrayList<>();

        // LayoutManager
        linearLayoutManager = new LinearLayoutManager(getActivity());
        linearLayoutManager.setOrientation(RecyclerView.HORIZONTAL);

        // setLayoutManager
        recyclerView.setLayoutManager(linearLayoutManager);

        // adapter
        recommendAdapter = new RecommendAdapter();

        // setDate
        recommendAdapter.RecommendAdapter(getActivity(), list);

        // adapter 클릭 이벤트
        recommendAdapter.setOnItemClickListener(new RecommendAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(View v, int position) {
                // 클릭했을때 원하는데로 처리해주는 부분
                //Toast.makeText(getActivity(), position + "클릭", Toast.LENGTH_SHORT).show();
                //목록 --> 상세보기로 값 넘기기
                board = list.get(position);
                Bundle bundle = new Bundle();
                bundle.putInt("category", 4); // Key, Value
                bundle.putSerializable("item", board);

                // Fragment 생성
                Fragment boardViewFragment = new BoardViewFragment();
                String fragmentTag = boardViewFragment.getClass().getSimpleName();
                getActivity().getSupportFragmentManager().popBackStack(fragmentTag, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                boardViewFragment.setArguments(bundle);
                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.container, boardViewFragment).addToBackStack(fragmentTag).commit();
            }
        });

        // setAdapter
        recyclerView.setAdapter(recommendAdapter);
    }

    /**
     * 하단 서포터즈
     **/
    private void initBottom(View rootView) {
        supportersList = new ArrayList<>();
        supportersAdapter = new SupportersAdapter(getActivity(), R.layout.main_supporters_list_item, supportersList);
        listView = rootView.findViewById(R.id.listView);
        scrollView = rootView.findViewById(R.id.scrollView);

        listView.setAdapter(supportersAdapter);
        setListViewHeightBasedOnChildren(listView);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
           @Override
           public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
               if(((MainActivity)getActivity()).getMember() != null) {   // 로그인 상태 일때
                   Supporters item = supportersAdapter.getItem(position); // 클릭한 항목의 서포터즈 데이터를 받아 객체에 저장하고

                   Intent intent = new Intent(getActivity(), SupportersViewActivity.class);
                   intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
                   intent.putExtra("member", ((MainActivity) getActivity()).getMember());    // 로그인 유저 정보
                   intent.putExtra("supporters", item); // 카페 정보
                   Log.d("[TEST MainPage]", "getCafeSeq = " + supporters.getCafeSeq());
                   startActivity(intent);
               } else {
                   Intent intent = new Intent(getActivity(), LoginActivity.class);
                   startActivity(intent);
               }
           }
       });
    }

    public static void setListViewHeightBasedOnChildren(ListView listView) {
        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter == null) {
            return;
        }
        int totalHeight = 0;
        for (int i = 0; i < listAdapter.getCount(); i++) {
            View listItem = listAdapter.getView(i, null, listView);
            listItem.measure(0,0);
            totalHeight += listItem.getMeasuredHeight();
        }
        ViewGroup.LayoutParams params = listView.getLayoutParams();
        params.height = totalHeight+ (listView.getDividerHeight() * (listAdapter.getCount() - 1));
        listView.setLayoutParams(params);
        listView.requestLayout();
    }

    /** 통신 연결 **/
    class HttpResponse extends AsyncHttpResponseHandler {
        private ProgressDialog dialog;
        private Activity activity;

        public HttpResponse(Activity activity) {
            activity = (FragmentActivity) getContext();
        }

        @Override
        public void onStart() {
//            dialog = new ProgressDialog(getActivity());
//            dialog.setMessage("잠시만 기다려주세요...");
//            dialog.setCancelable(false);
//            dialog.show();
        }
        @Override
        public void onFinish() {
//            dialog.dismiss();
//            dialog = null;
        }

        @Override
        public void onSuccess(int i, Header[] headers, byte[] bytes) {
            String str = new String(bytes);

            try {
                JSONObject json = new JSONObject(str);
                String rt = json.getString("rt");
                int total = json.getInt("total");
                if (rt.equals("board_list_OK") && total > 0) {
                    JSONArray item = json.getJSONArray("item");
                    Log.d("[TEST]", "item.length() : " + item.length());
                    for (int x = 0; x < item.length(); x++) {
                        if(x > 5) break; // 리사이클러뷰에 최대 5개만 출력
                        JSONObject temp = item.getJSONObject(x);
                        Board board = new Board();
                        board.setSeq(temp.getInt("seq"));
                        board.setMemId(temp.getString("memid"));
                        board.setName(temp.getString("name"));
                        board.setIdImage(temp.getString("idimage"));
                        board.setCategory(temp.getInt("category"));
                        board.setSubject(temp.getString("subject"));
                        board.setContent(temp.getString("content"));
                        board.setAge(temp.getString("age"));
                        board.setImage(temp.getString("image"));
                        board.setVideo(temp.getString("video"));
                        board.setHeart(temp.getInt("heart"));
                        board.setHit(temp.getInt("hit"));
                        board.setLogdate(temp.getString("logdate"));

                        //혼놀정보
                        list.add(board);
                    }
                    recyclerView.setAdapter(recommendAdapter);
                } else {//실패
                    //Toast.makeText(getContext(), "정보 리스트 불러오기 실패", Toast.LENGTH_SHORT).show();
                }

                if(rt.equals("cafe_list_OK") && total > 0) {
                    JSONArray items = json.getJSONArray("items");
                    supportersAdapter.clear();
                    for(int a = 0; a < items.length(); a++) {
                        if(a > 10) break; // 리스트뷰에 최대 10개만 출력

                        JSONObject temp = items.getJSONObject(a);
                        supporters = new Supporters();
                        supporters.setCafeCount(temp.getInt("cafeCount"));
                        supporters.setCafeKind(temp.getString("cafeKind"));
                        supporters.setCafeContent(temp.getString("cafeContent"));
                        supporters.setCafeDate(temp.getString("cafeDate"));
                        supporters.setCafeSeq(temp.getInt("cafeSeq"));
                        supporters.setCafePlace(temp.getString("cafePlace"));
                        supporters.setCafeSubject(temp.getString("cafeSubject"));
                        supporters.setCafeImg(temp.getString("cafeImg"));
                        supporters.setCafe_host(temp.getString("cafe_host"));
                        supporters.setClassImage(temp.getString("classImage"));
                        supporters.setClassName(temp.getString("className"));

                        supportersList.add(supporters);
                        listView.setAdapter(supportersAdapter);
                    }
                    // 리스트의 아이템의 총 세로크기를 계산해서 화면 레이아웃 지정해줌
                    setListViewHeightBasedOnChildren(listView);
                } else {//실패
                    //Toast.makeText(getContext(), "메인화면 카페 리스트 불러오기 실패", Toast.LENGTH_SHORT).show();
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onFailure(int i, Header[] headers, byte[] bytes, Throwable throwable) {
            //Toast.makeText(getActivity(), "통신실패", Toast.LENGTH_SHORT).show();
        }
    }
}